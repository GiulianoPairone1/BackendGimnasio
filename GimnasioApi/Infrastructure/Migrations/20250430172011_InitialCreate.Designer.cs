// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250430172011_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("ClientGymSession", b =>
                {
                    b.Property<int>("ClientsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GymSessionsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClientsId", "GymSessionsId");

                    b.HasIndex("GymSessionsId");

                    b.ToTable("ClientGymSession");
                });

            modelBuilder.Entity("Domain.Entities.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Reps")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RestTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoutineId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sets")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoutineId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("Domain.Entities.GymSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoutineId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SessionDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("SessionType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrainerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoutineId");

                    b.HasIndex("TrainerId");

                    b.ToTable("GymSessions");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            IsAvailable = true,
                            RoutineId = 2,
                            SessionDate = new DateTime(2025, 8, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            SessionType = 2,
                            TrainerId = 4
                        });
                });

            modelBuilder.Entity("Domain.Entities.Routine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TrainerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TrainerId");

                    b.ToTable("Routines");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            IsAvailable = true,
                            Name = "Full Body Beginner",
                            TrainerId = 4
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Phone")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<int>("UserType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.Admin", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.HasDiscriminator().HasValue(2);

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Email = "admin@gmail.com",
                            IsAvailable = true,
                            Name = "Admin",
                            Password = "admin",
                            Phone = 123456789,
                            Surname = "Gym",
                            UserType = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.Property<double>("Height")
                        .HasColumnType("REAL");

                    b.Property<double>("Weight")
                        .HasColumnType("REAL");

                    b.HasDiscriminator().HasValue(0);

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Email = "client@gmail.com",
                            IsAvailable = true,
                            Name = "Client",
                            Password = "client",
                            Phone = 123456789,
                            Surname = "Gym",
                            UserType = 0,
                            Height = 0.0,
                            Weight = 0.0
                        });
                });

            modelBuilder.Entity("Domain.Entities.SuperAdmin", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.HasDiscriminator().HasValue(3);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "superadmin@gmail.com",
                            IsAvailable = true,
                            Name = "SuperAdmin",
                            Password = "superadmin",
                            Phone = 123456789,
                            Surname = "Gym",
                            UserType = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.Trainer", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.Property<int>("TrainerSpeciality")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue(1);

                    b.HasData(
                        new
                        {
                            Id = 4,
                            Email = "trainer@gmail.com",
                            IsAvailable = true,
                            Name = "Trainer",
                            Password = "trainer",
                            Phone = 123456789,
                            Surname = "Gym",
                            UserType = 1,
                            TrainerSpeciality = 3
                        });
                });

            modelBuilder.Entity("ClientGymSession", b =>
                {
                    b.HasOne("Domain.Entities.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.GymSession", null)
                        .WithMany()
                        .HasForeignKey("GymSessionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Exercise", b =>
                {
                    b.HasOne("Domain.Entities.Routine", "Routine")
                        .WithMany("Exercises")
                        .HasForeignKey("RoutineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Routine");
                });

            modelBuilder.Entity("Domain.Entities.GymSession", b =>
                {
                    b.HasOne("Domain.Entities.Routine", "Routine")
                        .WithMany("GymSessions")
                        .HasForeignKey("RoutineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Trainer", "Trainer")
                        .WithMany("GymSessions")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Routine");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Domain.Entities.Routine", b =>
                {
                    b.HasOne("Domain.Entities.Trainer", "Trainer")
                        .WithMany("Routines")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Domain.Entities.Routine", b =>
                {
                    b.Navigation("Exercises");

                    b.Navigation("GymSessions");
                });

            modelBuilder.Entity("Domain.Entities.Trainer", b =>
                {
                    b.Navigation("GymSessions");

                    b.Navigation("Routines");
                });
#pragma warning restore 612, 618
        }
    }
}
